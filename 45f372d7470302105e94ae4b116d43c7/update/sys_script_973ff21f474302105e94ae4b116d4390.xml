<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="sys_script">
    <sys_script action="INSERT_OR_UPDATE">
        <abort_action>false</abort_action>
        <access>package_private</access>
        <action_delete>false</action_delete>
        <action_insert>true</action_insert>
        <action_query>false</action_query>
        <action_update>false</action_update>
        <active>true</active>
        <add_message>false</add_message>
        <advanced>true</advanced>
        <change_fields>false</change_fields>
        <client_callable>false</client_callable>
        <collection>x_1128327_loan_loan_run</collection>
        <condition/>
        <description/>
        <execute_function>false</execute_function>
        <filter_condition/>
        <is_rest>false</is_rest>
        <message/>
        <name>New Run, Generate Payments</name>
        <order>100</order>
        <priority>100</priority>
        <rest_method/>
        <rest_method_text/>
        <rest_service/>
        <rest_service_text/>
        <rest_variables/>
        <role_conditions/>
        <script><![CDATA[(function executeRule(current, previous /*null when async*/ ) {

    function calculateLoanDetails(loanAmount, annualInterestRate, loanPeriodYears, paymentsPerYear, paymentNumber) {
        // Convert annual interest rate to a decimal
        let interestRate = annualInterestRate / 100;

        // Calculate the monthly interest rate
        let periodInterestRate = interestRate / paymentsPerYear;

        // Calculate the total number of payments
        let totalPayments = loanPeriodYears * paymentsPerYear;

        // Calculate the scheduled payment amount using the formula for an amortizing loan
        let paymentAmount = loanAmount * (periodInterestRate * Math.pow(1 + periodInterestRate, totalPayments)) / (Math.pow(1 + periodInterestRate, totalPayments) - 1);

        // Calculate the balance before the specified payment number
        let balanceBeforePayment = loanAmount * Math.pow(1 + periodInterestRate, paymentNumber - 1) -
            (paymentAmount * (Math.pow(1 + periodInterestRate, paymentNumber - 1) - 1) / periodInterestRate);

        // Calculate the interest portion of the specified payment
        let interest = balanceBeforePayment * periodInterestRate;

        // Calculate the principal portion of the specified payment
        let principal = paymentAmount - interest;

        // Calculate the balance after the specified payment
        let balanceAfterPayment = balanceBeforePayment - principal;

        // Calculate cumulative interest paid up to the specified payment
        let cumulativeInterest = (paymentAmount * paymentNumber) - (loanAmount - balanceAfterPayment);

        return {
            paymentAmount: paymentAmount.toFixed(2),
            balanceBeforePayment: balanceBeforePayment.toFixed(2),
            balanceAfterPayment: balanceAfterPayment.toFixed(2),
            interest: interest.toFixed(2),
            principal: principal.toFixed(2),
            cumulativeInterest: cumulativeInterest.toFixed(2)
        };
    }

	// Get data from the loan config
	const loanConfigGR = current.loan_configuration.getRefRecord();
	const startDate = new GlideDateTime(loanConfigGR.getValue("start_date"));
	const loanAmount = loanConfigGR.getValue("loan_amount");
	const interestRate = loanConfigGR.getValue("annual_interest_rate");
	const paymentsPerYear = loanConfigGR.getValue("payments_per_year");
	const numYears = loanConfigGR.getValue("loan_period_in_years");

	// Create a new payment record for each payment required
	const numPayments = paymentsPerYear * numYears;
	for (let i = 1; i <= numPayments; i++) {
		const paymentDetails = calculateLoanDetails(loanAmount, interestRate, numYears, paymentsPerYear, i);
		const newPaymentGR = new GlideRecord("x_1128327_loan_loan_payment");
		startDate.addMonthsUTC(1);
		newPaymentGR.payment_date = startDate;
		newPaymentGR.payment_number = i;
		newPaymentGR.loan_run = current.getValue("sys_id");
		newPaymentGR.payment_amount = paymentDetails.paymentAmount;
		newPaymentGR.beginning_balance = paymentDetails.balanceBeforePayment;
		newPaymentGR.ending_balance = paymentDetails.balanceAfterPayment;
		newPaymentGR.interest = paymentDetails.interest;
		newPaymentGR.principal = paymentDetails.principal;
		newPaymentGR.cumulative_interest = paymentDetails.cumulativeInterest;
		newPaymentGR.insert();
	}

	// Update the state of the current run to complete
	current.state = "2"; // Complete
	current.update();

})(current, previous);]]></script>
        <sys_class_name>sys_script</sys_class_name>
        <sys_created_by>reece.poulsen</sys_created_by>
        <sys_created_on>2024-07-02 23:52:30</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>973ff21f474302105e94ae4b116d4390</sys_id>
        <sys_mod_count>8</sys_mod_count>
        <sys_name>New Run, Generate Payments</sys_name>
        <sys_overrides/>
        <sys_package display_value="Home Loan Helper" source="x_1128327_loan">45f372d7470302105e94ae4b116d43c7</sys_package>
        <sys_policy/>
        <sys_scope display_value="Home Loan Helper">45f372d7470302105e94ae4b116d43c7</sys_scope>
        <sys_update_name>sys_script_973ff21f474302105e94ae4b116d4390</sys_update_name>
        <sys_updated_by>reece.poulsen</sys_updated_by>
        <sys_updated_on>2024-07-03 03:04:24</sys_updated_on>
        <template/>
        <when>after</when>
    </sys_script>
    <sys_translated_text action="delete_multiple" query="documentkey=973ff21f474302105e94ae4b116d4390"/>
</record_update>
