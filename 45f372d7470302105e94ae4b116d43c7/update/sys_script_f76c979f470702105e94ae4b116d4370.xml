<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="sys_script">
    <sys_script action="INSERT_OR_UPDATE">
        <abort_action>false</abort_action>
        <access>package_private</access>
        <action_delete>false</action_delete>
        <action_insert>false</action_insert>
        <action_query>false</action_query>
        <action_update>true</action_update>
        <active>true</active>
        <add_message>false</add_message>
        <advanced>true</advanced>
        <change_fields>false</change_fields>
        <client_callable>false</client_callable>
        <collection>x_1128327_loan_loan_run</collection>
        <condition/>
        <description/>
        <execute_function>false</execute_function>
        <filter_condition table="x_1128327_loan_loan_run">stateCHANGESTO2^EQ<item display_value="Complete" endquery="false" field="state" goto="false" newquery="false" operator="CHANGESTO" or="false" value="2"/>
            <item endquery="true" field="" goto="false" newquery="false" operator="=" or="false" value=""/>
        </filter_condition>
        <is_rest>false</is_rest>
        <message/>
        <name>Run Complete, Summarize Data</name>
        <order>100</order>
        <priority>100</priority>
        <rest_method/>
        <rest_method_text/>
        <rest_service/>
        <rest_service_text/>
        <rest_variables/>
        <role_conditions/>
        <script><![CDATA[(function executeRule(current, previous /*null when async*/) {

	// Get all payments related to this run
	const paymentGR = new GlideRecord("x_1128327_loan_loan_payment");
	paymentGR.addQuery("loan_run", current.getValue("sys_id"));
	paymentGR.query();

	// Sum up the payments, principal, and interest
	// Populate the payment amount and scheduled payments
	let loanTotal = 0;
	let principal = 0;
	let interest = 0;
	let paymentAmount = 0;
	let paymentCount = 0;
	while (paymentGR.next()) {
		if (!paymentAmount) paymentAmount = paymentGR.getValue("payment_amount");
		loanTotal += parseFloat(paymentGR.getValue("payment_amount"));
		principal += parseFloat(paymentGR.getValue("principal"));
		interest += parseFloat(paymentGR.getValue("interest"));
		paymentCount++;
	}

	current.loan_total = loanTotal.toFixed(0);
	current.interest = interest.toFixed(0);
	current.principal = principal.toFixed(0);
	current.scheduled_payments = paymentCount;
	current.scheduled_payment_amount = paymentAmount;

})(current, previous);]]></script>
        <sys_class_name>sys_script</sys_class_name>
        <sys_created_by>reece.poulsen</sys_created_by>
        <sys_created_on>2024-07-03 02:16:40</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>f76c979f470702105e94ae4b116d4370</sys_id>
        <sys_mod_count>2</sys_mod_count>
        <sys_name>Run Complete, Summarize Data</sys_name>
        <sys_overrides/>
        <sys_package display_value="Home Loan Helper" source="x_1128327_loan">45f372d7470302105e94ae4b116d43c7</sys_package>
        <sys_policy/>
        <sys_scope display_value="Home Loan Helper">45f372d7470302105e94ae4b116d43c7</sys_scope>
        <sys_update_name>sys_script_f76c979f470702105e94ae4b116d4370</sys_update_name>
        <sys_updated_by>reece.poulsen</sys_updated_by>
        <sys_updated_on>2024-07-03 02:20:10</sys_updated_on>
        <template/>
        <when>before</when>
    </sys_script>
    <sys_translated_text action="delete_multiple" query="documentkey=f76c979f470702105e94ae4b116d4370"/>
</record_update>
